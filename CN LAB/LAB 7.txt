Diffie-Hellman--------------------------------------------------

import random
import math

def isPrime(n):
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def getPrimeNumber(r1, r2):
    while True:
        n = random.randint(r1, r2)
        if isPrime(n):
            return n

p=getPrimeNumber(2,100)
print('Chosen prime number p=',p)
g=int(input('Enter the generator of order p-1:'))

x = random.randint(2, p)
R1 = pow(g,x) % p
print('Alice choosen a large random number x=',x,' and computed R1=',R1)

y = random.randint(2, p)
R2 = pow(g,y) % p
print('Bob choosen a large random number y=',y,' and computed R2=',R2)

K_Alice = pow(R2,x) % p
K_Bob   = pow(R1,y) % p
print('Alice\'s Computed Shared Key is:',K_Alice)
print('Bob\'s   Computed Shared Key is:',K_Bob)

if K_Alice == K_Bob:
  print('Key Exchange Successful...')
else:
  print('Key Exchange not Successful...')


RSA_DigitalSignature-------------------------------------------------------------

import math
import random

def keyGeneration():
  p=int(input('Enter 1st large prime p:'))                  
  q=int(input('Enter 2nd large prime q:'))                  
  n=p*q                                                     
  phi_n=(p-1)*(q-1)                                         
  e=int(input('Randomly choose e between 1 and phi_n:'))
  while(math.gcd(e,phi_n)!=1 and (1<e and e<phi_n)):        
    e=int(input('Randomly choose e between 1 and phi_n:'))

  k=random.randint(1,1000)
  while((k*phi_n+1)%e != 0):                                
    k=random.randint(1,1000)
  d=int((k*phi_n+1)/e)                                     

  return e,n,d

def generate_signature(M,d,n):
  S=pow(M,d)%n
  return S

def verify_signature(S,M,e,n):
  M1=pow(S,e)%n
  print('The receiver is now verifying..... It generated the message M1=',M1)
  if M == M1:
    return True
  return False

e=n=d=0
e,n,d = keyGeneration()
print('e=',e,'n=',n,'d=',d)

M=int(input('Enter message M to sign:'))
S=generate_signature(M,e,n)
print('Signature generated')
print('Sending signature S=',S,' and message M=',M)
res=verify_signature(S,M,d,n)
if res==True:
  print('Message Accepted...')
else:
  print('Message Rejected...')